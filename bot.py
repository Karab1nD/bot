import telebot
from telebot import types
from TaskProject import TaskOrganizer

TOKEN = '6858690220:AAEww7xoHHBGK4vtpS-WCrII1Vyei6L2igo'
bot = telebot.TeleBot(TOKEN)

organizer = TaskOrganizer()

main_kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
main_kb.add('üìñ –í—Å–µ –∑–∞–¥–∞—á–∏', '‚≠ê –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞', '‚úÖ –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É', 'ü™£ –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É')

main_kb_cancel = types.ReplyKeyboardMarkup(resize_keyboard=True)
main_kb_cancel.add('–û—Ç–º–µ–Ω–∞')


@bot.message_handler(regexp='üìñ –í—Å–µ –∑–∞–¥–∞—á–∏')
def show_tasks(message):
    tasks = organizer.view_tasks(message.chat.id)
    if tasks:
        for inx, task in enumerate(tasks, 1):
            mess = f'–ù–æ–º–µ—Ä: {inx}\n {task.title}\n {task.note}'
            print(mess)
            bot.send_message(message.chat.id, mess, reply_markup=main_kb, parse_mode="MarkdownV2")


@bot.message_handler(regexp='‚≠ê –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞')
def new_task(message):
    print(message)  # Ok, Dmitry, –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
    bot.send_message(message.from_user.id, f'Ok, {message.from_user.first_name}, –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏',
                     reply_markup=main_kb_cancel)
    bot.register_next_step_handler(message, process_next_step1)


def process_next_step1(message):
    title = message.text.strip()
    if title.upper() == '–û—Ç–º–µ–Ω–∞'.upper():
        bot.send_message(message.chat.id, '–û–ø–µ—Ä–∞—Ü–∏—è –≤–≤–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞', reply_markup=main_kb)
        return
    bot.send_message(message.from_user.id, f'Ok, {message.from_user.first_name}, –Ω–∞–ø–∏—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏',
                     reply_markup=main_kb_cancel)
    bot.register_next_step_handler(message, process_next_step2, title)


def process_next_step2(message, title):
    note = message.text.strip()
    if note.upper() == '–û—Ç–º–µ–Ω–∞'.upper():
        bot.send_message(message.chat.id, '–û–ø–µ—Ä–∞—Ü–∏—è –≤–≤–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞', reply_markup=main_kb)
        return
    bot.send_message(message.from_user.id, f'Ok, {message.from_user.first_name}, –Ω–∞–ø–∏—à–∏ –∫–æ–¥',
                     reply_markup=main_kb_cancel)
    bot.register_next_step_handler(message, process_next_step3, title, note)


def process_next_step3(message, title, note):
    code = message.text.strip()
    if code.upper() == '–û—Ç–º–µ–Ω–∞'.upper():
        bot.send_message(message.chat.id, '–û–ø–µ—Ä–∞—Ü–∏—è –≤–≤–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞', reply_markup=main_kb)
        return
    organizer.add_task(message.chat.id, title, note)
    bot.send_message(message.chat.id, '–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞', reply_markup=main_kb)


@bot.message_handler(regexp='‚úÖ –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É')
def upd_task(message):
    bot.send_message(message.from_user.id, f'Ok, {message.from_user.first_name}, –Ω–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏',
                     reply_markup=main_kb_cancel)
    bot.register_next_step_handler(message, process_next_step_upd)


def process_next_step_upd(message):
    number = message.text.strip()
    if number.upper() == '–û—Ç–º–µ–Ω–∞'.upper():
        bot.send_message(message.chat.id, '–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞', reply_markup=main_kb)
        return
    main_kb_btn = types.ReplyKeyboardMarkup(resize_keyboard=True)
    main_kb_btn.add('–ù–∞–∑–≤–∞–Ω–∏–µ', '–û–ø–∏—Å–∞–Ω–∏–µ', '–ö–æ–¥')
    main_kb_btn.row('–û—Ç–º–µ–Ω–∞')
    bot.send_message(message.from_user.id, f'Ok, {message.from_user.first_name}, —á—Ç–æ –º–µ–Ω—è–µ–º?',
                     reply_markup=main_kb_btn)
    bot.register_next_step_handler(message, process_next_upd2, number)


def process_next_upd2(message, number):
    task = message.text.strip()
    if task.upper() == '–û—Ç–º–µ–Ω–∞'.upper():
        bot.send_message(message.chat.id, '–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞', reply_markup=main_kb)
        return

    match task.upper():
        case '–ù–ê–ó–í–ê–ù–ò–ï':
            mess = f'Ok, {message.from_user.first_name}, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ?'
        case '–û–ü–ò–°–ê–ù–ò–ï':
            mess = f'Ok, {message.from_user.first_name}, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ?'
        case '–ö–û–î':
            mess = f'Ok, {message.from_user.first_name}, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥?'
        case _:
            mess = f'{message.from_user.first_name}, —è —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑'
            bot.send_message(message.from_user.id, mess, reply_markup=main_kb)
            return

    bot.send_message(message.from_user.id, mess, reply_markup=main_kb_cancel)
    bot.register_next_step_handler(message, process_next_upd3, number, task)


def process_next_upd3(message, number, task):
    task2 = message.text.strip()
    if task2.upper() == '–û—Ç–º–µ–Ω–∞'.upper():
        bot.send_message(message.chat.id, '–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞', reply_markup=main_kb)
        return

    match task.upper():
        case '–ù–ê–ó–í–ê–ù–ò–ï':
            mess = f'Ok, {message.from_user.first_name}, –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ'
            organizer.edit_title(message.chat.id, int(number), task2)
        case '–û–ü–ò–°–ê–ù–ò–ï':
            mess = f'Ok, {message.from_user.first_name}, –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ'
            organizer.edit_note(message.chat.id, int(number), task2)
        case '–ö–û–î':
            mess = f'Ok, {message.from_user.first_name}, –∫–æ–¥ –∏–∑–º–µ–Ω–µ–Ω'
            organizer.edit_code(message.chat.id, int(number), task2)
    bot.send_message(message.chat.id, mess, reply_markup=main_kb)


@bot.message_handler(regexp='ü™£ –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É')
def del_task(message):
    bot.send_message(message.from_user.id, f'Ok, {message.from_user.first_name}, –Ω–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏',
                     reply_markup=main_kb_cancel)
    bot.register_next_step_handler(message, process_next_step_del)


def process_next_step_del(message):
    number = message.text.strip()
    if number.upper() == '–û—Ç–º–µ–Ω–∞'.upper():
        bot.send_message(message.chat.id, '–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞', reply_markup=main_kb)
        return
    organizer.del_task(message.chat.id, int(number))
    bot.send_message(message.chat.id, '–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞', reply_markup=main_kb)


@bot.message_handler(commands=['help', 'start'])
def start(message):
    organizer.save_user_data(message.chat.id, message.from_user.first_name, 1)
    commands_lst = [
        "/start - –°—Ç–∞—Ä—Ç",
        "/show_tasks - –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á",
        "/add_task - –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞",
        "/update_task - –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É",
        "/delete_task - –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É"
    ]
    mess = "_–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥_"
    bot.send_message(message.chat.id, mess, reply_markup=main_kb, parse_mode='MarkdownV2')
    bot.send_message(message.chat.id, "\n".join(commands_lst), reply_markup=main_kb)


@bot.message_handler(commands=['del_task'])
def delete_task(message):
    bot.send_message(message.from_user.id, f'Ok, {message.from_user.first_name}, –Ω–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏',
                     reply_markup=main_kb_cancel)
    bot.register_next_step_handler(message, process_next_step_del)


# –∞–¥–º–∏–Ω–∫–∞
@bot.message_handler(commands=['admin'])
def admin(message):
    if message.chat.id != 575489348:
        return

    users = organizer.read_users()

    inline_kb = types.InlineKeyboardMarkup()
    for userid, username in users:
        btn = types.InlineKeyboardButton(username, callback_data=userid)
        inline_kb.add(btn)
    bot.send_message(message.chat.id, 'Hi, Admin', reply_markup=inline_kb)


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    print(call)
    tasks = organizer.view_tasks(call.data)
    if tasks:
        for inx, task in enumerate(tasks, 1):
            mess = f'–ù–æ–º–µ—Ä: {inx}\n {task.title}\n {task.note}'
            bot.send_message(call.from_user.id, mess, parse_mode="MarkdownV2")


bot.polling(none_stop=True)
